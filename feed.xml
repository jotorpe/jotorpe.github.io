<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en"><generator uri="https://jekyllrb.com/" version="4.3.1">Jekyll</generator><link href="https://jotorpe.github.io/feed.xml" rel="self" type="application/atom+xml"/><link href="https://jotorpe.github.io/" rel="alternate" type="text/html" hreflang="en"/><updated>2023-01-05T18:03:26+00:00</updated><id>https://jotorpe.github.io/feed.xml</id><title type="html">blank</title><subtitle>Personal website with Python information and portfolio </subtitle><entry><title type="html">OpenCV quick intro</title><link href="https://jotorpe.github.io/blog/2023/openCV-intro/" rel="alternate" type="text/html" title="OpenCV quick intro"/><published>2023-01-05T00:00:00+00:00</published><updated>2023-01-05T00:00:00+00:00</updated><id>https://jotorpe.github.io/blog/2023/openCV-intro</id><content type="html" xml:base="https://jotorpe.github.io/blog/2023/openCV-intro/"><![CDATA[<h1 id="getting-started-with-opencv">Getting started with OpenCV</h1> <p>Install the latest versions of OpenCV and imutils (used to simplify code) depending on your OS and IDE.</p> <p>These codes are based on the fantastic beginner tutorials provided by <a href="pyimagesearch.com">pyimagesearch</a>.</p> <p>We will get straight into coding, explaining in each line its function.</p> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># load_display_save_image.py
</span><span class="kn">import</span> <span class="nn">imutils</span>
<span class="kn">import</span> <span class="nn">cv2</span>
<span class="kn">import</span> <span class="nn">argparse</span>

<span class="c1"># parsing command line
</span><span class="n">parser</span> <span class="o">=</span> <span class="n">argparse</span><span class="p">.</span><span class="n">ArgumentParser</span><span class="p">(</span><span class="n">description</span><span class="o">=</span><span class="s">"Load image, show shape, display it, save it as .png."</span><span class="p">,</span>
    <span class="n">epilog</span><span class="o">=</span><span class="s">"The end."</span><span class="p">)</span>
<span class="n">parser</span><span class="p">.</span><span class="n">add_argument</span><span class="p">(</span><span class="s">"-i"</span><span class="p">,</span><span class="s">"--image"</span><span class="p">,</span> <span class="n">required</span><span class="o">=</span><span class="bp">True</span><span class="p">,</span> <span class="n">help</span><span class="o">=</span><span class="s">"path of the image"</span><span class="p">)</span> 
<span class="n">args</span> <span class="o">=</span> <span class="nb">vars</span><span class="p">(</span><span class="n">parser</span><span class="p">.</span><span class="n">parse_args</span><span class="p">())</span>

<span class="n">image</span> <span class="o">=</span> <span class="n">cv2</span><span class="p">.</span><span class="n">imread</span><span class="p">(</span><span class="n">args</span><span class="p">[</span><span class="s">"image"</span><span class="p">])</span>
<span class="p">(</span><span class="n">h</span><span class="p">,</span> <span class="n">w</span><span class="p">,</span> <span class="n">d</span><span class="p">)</span> <span class="o">=</span> <span class="n">image</span><span class="p">.</span><span class="n">shape</span> <span class="c1"># represented as numpy array
# in any array 3D you have the rows (height), columns (width) and depth(number of channels, if color=3)
# that is how images are represented 
</span><span class="k">print</span><span class="p">(</span><span class="sa">f</span><span class="s">"height = </span><span class="si">{</span><span class="n">h</span><span class="si">}</span><span class="s"> px, width = </span><span class="si">{</span><span class="n">w</span><span class="si">}</span><span class="s"> px, depth = </span><span class="si">{</span><span class="n">d</span><span class="si">}</span><span class="s"> channels"</span><span class="p">)</span>

<span class="n">cv2</span><span class="p">.</span><span class="n">imshow</span><span class="p">(</span><span class="s">"Loaded image"</span><span class="p">,</span> <span class="n">image</span><span class="p">)</span>
<span class="c1"># show image in new window
</span><span class="n">cv2</span><span class="p">.</span><span class="n">waitKey</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span>
<span class="c1"># waiting for clicking the image and push any key to continue execution (0)
# cv2.destroyAllWindows(); cv2.waitKey(1) # use it to show image and when clicked destroy it
</span>
<span class="n">cv2</span><span class="p">.</span><span class="n">imwrite</span><span class="p">(</span><span class="s">"createdimage.png"</span><span class="p">,</span> <span class="n">image</span><span class="p">)</span>
</code></pre></div></div> <h3 id="array-slicing">Array slicing</h3> <p>In Computer Vision (CV) the images are represented as arrays, with the number of rows the height and the number of columns the width, 400x600=240000 px. Each pixel of an image has a value corresponding to its brightness in a grayscale bar, going from 0 to 255 (considering a 8bits resolution). In color images, we have 3 channels if we use the RGB space, which for historical reasons is used as BGR in openCV. It is represented as a 3-tuple with 256^3=16777216 combinations of colors. Also as an array the coordinate system origin is in the left upper corner (0,0). This is the reference we will use for indexing the array.</p> <p>The idea is to obtain a Region of Interest (ROI) for further processing.</p> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># slicing_image_bgr.py
</span><span class="kn">import</span> <span class="nn">imutils</span>
<span class="kn">import</span> <span class="nn">cv2</span>
<span class="kn">import</span> <span class="nn">argparse</span>

<span class="c1"># parsing command line
</span><span class="n">parser</span> <span class="o">=</span> <span class="n">argparse</span><span class="p">.</span><span class="n">ArgumentParser</span><span class="p">(</span><span class="n">description</span><span class="o">=</span><span class="s">"Load image, get BGR, change color, display it."</span><span class="p">,</span>
    <span class="n">epilog</span><span class="o">=</span><span class="s">"The end."</span><span class="p">)</span>
<span class="n">parser</span><span class="p">.</span><span class="n">add_argument</span><span class="p">(</span><span class="s">"-i"</span><span class="p">,</span><span class="s">"--image"</span><span class="p">,</span> <span class="n">required</span><span class="o">=</span><span class="bp">True</span><span class="p">,</span> <span class="n">help</span><span class="o">=</span><span class="s">"path of the image"</span><span class="p">)</span> 
<span class="n">args</span> <span class="o">=</span> <span class="nb">vars</span><span class="p">(</span><span class="n">parser</span><span class="p">.</span><span class="n">parse_args</span><span class="p">())</span>

<span class="n">image</span> <span class="o">=</span> <span class="n">cv2</span><span class="p">.</span><span class="n">imread</span><span class="p">(</span><span class="n">args</span><span class="p">[</span><span class="s">"image"</span><span class="p">])</span>
<span class="n">cv2</span><span class="p">.</span><span class="n">imshow</span><span class="p">(</span><span class="s">"Original"</span><span class="p">,</span> <span class="n">image</span><span class="p">)</span>
<span class="c1"># get color channels in one pixel
</span><span class="p">(</span><span class="n">B</span><span class="p">,</span><span class="n">G</span><span class="p">,</span><span class="n">R</span><span class="p">)</span> <span class="o">=</span> <span class="n">image</span><span class="p">[</span><span class="mi">40</span><span class="p">,</span><span class="mi">200</span><span class="p">]</span> <span class="c1"># row 40, column 200
</span><span class="k">print</span><span class="p">(</span><span class="sa">f</span><span class="s">"R = </span><span class="si">{</span><span class="n">R</span><span class="si">}</span><span class="s">, G =</span><span class="si">{</span> <span class="n">G</span><span class="si">}</span><span class="s">, B = </span><span class="si">{</span><span class="n">B</span><span class="si">}</span><span class="s">"</span><span class="p">)</span>
<span class="n">image</span><span class="p">[</span><span class="mi">50</span><span class="p">,</span><span class="mi">50</span><span class="p">]</span> <span class="o">=</span> <span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">255</span><span class="p">)</span> <span class="c1"># setting red color
</span>
<span class="c1"># select a ROI 
</span><span class="n">roi</span> <span class="o">=</span> <span class="n">image</span><span class="p">[</span><span class="mi">0</span><span class="p">:</span><span class="mi">100</span><span class="p">,</span> <span class="mi">0</span><span class="p">:</span><span class="mi">100</span><span class="p">]</span>
<span class="c1"># slicing the rows and the columns (ystart:yend, xstart:xend)
</span><span class="n">cv2</span><span class="p">.</span><span class="n">imshow</span><span class="p">(</span><span class="s">"ROI"</span><span class="p">,</span> <span class="n">roi</span><span class="p">)</span>
<span class="n">image</span><span class="p">[</span><span class="mi">0</span><span class="p">:</span><span class="mi">100</span><span class="p">,</span> <span class="mi">0</span><span class="p">:</span><span class="mi">100</span><span class="p">]</span> <span class="o">=</span> <span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="mi">255</span><span class="p">,</span><span class="mi">0</span><span class="p">)</span> <span class="c1"># green
</span><span class="n">cv2</span><span class="p">.</span><span class="n">imshow</span><span class="p">(</span><span class="s">"Changed image"</span><span class="p">,</span> <span class="n">image</span><span class="p">)</span>

<span class="n">cv2</span><span class="p">.</span><span class="n">waitKey</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span>
</code></pre></div></div> <h3 id="drawing">Drawing</h3> <p>It’s important to point out features in our images, select ROIs that contain something that the algorithm detected. Any drawing operation is performed in-place (the original image is altered), therefore it is important to remember to create a copy and operate on this image <code class="language-plaintext highlighter-rouge">copied=image.copy()</code>.</p> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="nn">numpy</span> <span class="k">as</span> <span class="n">np</span>
<span class="kn">import</span> <span class="nn">cv2</span>
<span class="o">%</span><span class="n">matplotlib</span> <span class="n">inline</span>

<span class="c1"># canvas with 200x200 px with 3 channels
</span><span class="n">canvas</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="n">zeros</span><span class="p">((</span><span class="mi">300</span><span class="p">,</span> <span class="mi">300</span><span class="p">,</span> <span class="mi">3</span><span class="p">),</span> <span class="n">dtype</span> <span class="o">=</span> <span class="s">"uint8"</span><span class="p">)</span>
<span class="c1"># black, important declare 8 bit array
</span>
<span class="c1"># line from left to right
</span><span class="n">green</span> <span class="o">=</span> <span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">255</span><span class="p">,</span> <span class="mi">0</span><span class="p">)</span>
<span class="n">cv2</span><span class="p">.</span><span class="n">line</span><span class="p">(</span><span class="n">canvas</span><span class="p">,</span> <span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">),</span> <span class="p">(</span><span class="mi">200</span><span class="p">,</span> <span class="mi">200</span><span class="p">),</span> <span class="n">green</span><span class="p">,</span> <span class="mi">3</span><span class="p">)</span>
<span class="c1"># starting to ending, then color, then thickness in px
</span><span class="n">cv2</span><span class="p">.</span><span class="n">imshow</span><span class="p">(</span><span class="s">"Canvas line"</span><span class="p">,</span> <span class="n">canvas</span><span class="p">)</span>

<span class="c1"># draw a square (empty) giving top left corner and bottom right corner, 2 px thickness
</span><span class="n">cv2</span><span class="p">.</span><span class="n">rectangle</span><span class="p">(</span><span class="n">canvas</span><span class="p">,</span> <span class="p">(</span><span class="mi">10</span><span class="p">,</span> <span class="mi">10</span><span class="p">),</span> <span class="p">(</span><span class="mi">60</span><span class="p">,</span> <span class="mi">60</span><span class="p">),</span> <span class="n">green</span><span class="p">,</span> <span class="mi">2</span><span class="p">)</span>
<span class="n">cv2</span><span class="p">.</span><span class="n">imshow</span><span class="p">(</span><span class="s">"Canvas square"</span><span class="p">,</span> <span class="n">canvas</span><span class="p">)</span>

<span class="c1"># blue filled rectangle
</span><span class="n">blue</span> <span class="o">=</span> <span class="p">(</span><span class="mi">255</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">)</span>
<span class="n">cv2</span><span class="p">.</span><span class="n">rectangle</span><span class="p">(</span><span class="n">canvas</span><span class="p">,</span> <span class="p">(</span><span class="mi">70</span><span class="p">,</span> <span class="mi">70</span><span class="p">),</span> <span class="p">(</span><span class="mi">100</span><span class="p">,</span> <span class="mi">100</span><span class="p">),</span> <span class="n">blue</span><span class="p">,</span> <span class="o">-</span><span class="mi">1</span><span class="p">)</span>
<span class="n">cv2</span><span class="p">.</span><span class="n">imshow</span><span class="p">(</span><span class="s">"Canvas filled square"</span><span class="p">,</span> <span class="n">canvas</span><span class="p">)</span>
<span class="n">cv2</span><span class="p">.</span><span class="n">waitKey</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span>
<span class="n">cv2</span><span class="p">.</span><span class="n">destroyAllWindows</span><span class="p">()</span>
<span class="c1"># seems in jupyter we need this line
</span>
<span class="c1"># circle at the center with increasing radius
</span><span class="n">canvas</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="n">zeros</span><span class="p">((</span><span class="mi">200</span><span class="p">,</span> <span class="mi">200</span><span class="p">,</span> <span class="mi">3</span><span class="p">),</span> <span class="n">dtype</span> <span class="o">=</span> <span class="s">"uint8"</span><span class="p">)</span>
<span class="p">(</span><span class="n">centerX</span><span class="p">,</span> <span class="n">centerY</span><span class="p">)</span> <span class="o">=</span> <span class="p">(</span><span class="n">canvas</span><span class="p">.</span><span class="n">shape</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span> <span class="o">//</span> <span class="mi">2</span><span class="p">,</span> <span class="n">canvas</span><span class="p">.</span><span class="n">shape</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">//</span> <span class="mi">2</span><span class="p">)</span>
<span class="c1"># integer division for placing the center
</span><span class="n">white</span> <span class="o">=</span> <span class="p">(</span><span class="mi">255</span><span class="p">,</span> <span class="mi">255</span><span class="p">,</span> <span class="mi">255</span><span class="p">)</span>
<span class="k">for</span> <span class="n">r</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">175</span><span class="p">,</span> <span class="mi">25</span><span class="p">):</span>
	<span class="n">cv2</span><span class="p">.</span><span class="n">circle</span><span class="p">(</span><span class="n">canvas</span><span class="p">,</span> <span class="p">(</span><span class="n">centerX</span><span class="p">,</span> <span class="n">centerY</span><span class="p">),</span> <span class="n">r</span><span class="p">,</span> <span class="n">white</span><span class="p">)</span>
<span class="n">cv2</span><span class="p">.</span><span class="n">imshow</span><span class="p">(</span><span class="s">"Canvas circles"</span><span class="p">,</span> <span class="n">canvas</span><span class="p">)</span>
<span class="n">cv2</span><span class="p">.</span><span class="n">waitKey</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span>
<span class="n">cv2</span><span class="p">.</span><span class="n">destroyAllWindows</span><span class="p">()</span>

<span class="c1"># draw 5 random circles
</span><span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">5</span><span class="p">):</span>
	<span class="c1"># randomly generate
</span>	<span class="n">radius</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="n">random</span><span class="p">.</span><span class="n">randint</span><span class="p">(</span><span class="mi">5</span><span class="p">,</span> <span class="n">high</span> <span class="o">=</span> <span class="mi">100</span><span class="p">)</span> <span class="c1"># radius from 5 to 100
</span>	<span class="n">color</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="n">random</span><span class="p">.</span><span class="n">randint</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="n">high</span> <span class="o">=</span> <span class="mi">256</span><span class="p">,</span> <span class="n">size</span> <span class="o">=</span> <span class="p">(</span><span class="mi">3</span><span class="p">,)).</span><span class="n">tolist</span><span class="p">()</span>
	<span class="n">pt</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="n">random</span><span class="p">.</span><span class="n">randint</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="n">high</span> <span class="o">=</span> <span class="mi">150</span><span class="p">,</span> <span class="n">size</span> <span class="o">=</span> <span class="p">(</span><span class="mi">2</span><span class="p">,))</span> <span class="c1"># center random
</span>
	<span class="c1"># draw our random circle
</span>	<span class="n">cv2</span><span class="p">.</span><span class="n">circle</span><span class="p">(</span><span class="n">canvas</span><span class="p">,</span> <span class="nb">tuple</span><span class="p">(</span><span class="n">pt</span><span class="p">),</span> <span class="n">radius</span><span class="p">,</span> <span class="n">color</span><span class="p">,</span> <span class="o">-</span><span class="mi">1</span><span class="p">)</span>

<span class="c1"># Show our masterpiece
</span><span class="n">cv2</span><span class="p">.</span><span class="n">imshow</span><span class="p">(</span><span class="s">"Canvas random"</span><span class="p">,</span> <span class="n">canvas</span><span class="p">)</span>
<span class="n">cv2</span><span class="p">.</span><span class="n">waitKey</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span>
<span class="n">cv2</span><span class="p">.</span><span class="n">destroyAllWindows</span><span class="p">()</span>

<span class="n">canvas</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="n">zeros</span><span class="p">((</span><span class="mi">200</span><span class="p">,</span> <span class="mi">200</span><span class="p">,</span> <span class="mi">3</span><span class="p">),</span> <span class="n">dtype</span> <span class="o">=</span> <span class="s">"uint8"</span><span class="p">)</span>
<span class="n">cv2</span><span class="p">.</span><span class="n">putText</span><span class="p">(</span><span class="n">canvas</span><span class="p">,</span> <span class="s">"Hey!"</span><span class="p">,</span> <span class="p">(</span><span class="mi">100</span><span class="p">,</span> <span class="mi">100</span><span class="p">),</span> 
	<span class="n">cv2</span><span class="p">.</span><span class="n">FONT_HERSHEY_SIMPLEX</span><span class="p">,</span> <span class="mf">0.7</span><span class="p">,</span> <span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">255</span><span class="p">,</span> <span class="mi">100</span><span class="p">),</span> <span class="mi">2</span><span class="p">)</span>
<span class="c1"># starting position,font used (generally sans-serif), scale, color and letter thickness
</span><span class="n">cv2</span><span class="p">.</span><span class="n">imshow</span><span class="p">(</span><span class="s">"Text in canvas"</span><span class="p">,</span> <span class="n">canvas</span><span class="p">)</span>
<span class="n">cv2</span><span class="p">.</span><span class="n">waitKey</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span>
<span class="n">cv2</span><span class="p">.</span><span class="n">destroyAllWindows</span><span class="p">()</span>
</code></pre></div></div> <h3 id="image-transformation">Image transformation</h3> <p>Translation, rotation and resizing. Formally, we will need to calculate several parameters like the point of rotation, create the translation matrix, apply an affine operator and so on. The library <code class="language-plaintext highlighter-rouge">imutils</code> save us tedious work. Here we see how to associated arguments with the flags <code class="language-plaintext highlighter-rouge">nargs</code> and also consider the type of variable introduced for the function.</p> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># transformation_image.py
</span><span class="kn">import</span> <span class="nn">imutils</span>
<span class="kn">import</span> <span class="nn">cv2</span>
<span class="kn">import</span> <span class="nn">argparse</span>

<span class="c1"># parsing command line
</span><span class="n">parser</span> <span class="o">=</span> <span class="n">argparse</span><span class="p">.</span><span class="n">ArgumentParser</span><span class="p">(</span><span class="n">description</span><span class="o">=</span><span class="s">"Translate, rotate or resize image"</span><span class="p">)</span>
<span class="n">parser</span><span class="p">.</span><span class="n">add_argument</span><span class="p">(</span><span class="s">"-i"</span><span class="p">,</span><span class="s">"--image"</span><span class="p">,</span> <span class="n">required</span><span class="o">=</span><span class="bp">True</span><span class="p">,</span> <span class="n">help</span><span class="o">=</span><span class="s">"path of the image"</span><span class="p">)</span> 
<span class="n">parser</span><span class="p">.</span><span class="n">add_argument</span><span class="p">(</span><span class="s">"-T"</span><span class="p">,</span><span class="s">"--Translate"</span><span class="p">,</span> <span class="n">nargs</span><span class="o">=</span><span class="s">'+'</span><span class="p">,</span> <span class="n">help</span><span class="o">=</span><span class="s">"translate image, 0: trans x, 1: trans y"</span><span class="p">,</span> <span class="nb">type</span><span class="o">=</span><span class="nb">float</span><span class="p">)</span> 
<span class="n">parser</span><span class="p">.</span><span class="n">add_argument</span><span class="p">(</span><span class="s">"-R"</span><span class="p">,</span><span class="s">"--Rotate"</span><span class="p">,</span> <span class="n">nargs</span><span class="o">=</span><span class="s">'+'</span><span class="p">,</span> <span class="n">help</span><span class="o">=</span><span class="s">"rotate image, 0: angle"</span><span class="p">,</span> <span class="nb">type</span><span class="o">=</span><span class="nb">float</span><span class="p">)</span> 
<span class="n">parser</span><span class="p">.</span><span class="n">add_argument</span><span class="p">(</span><span class="s">"-rn"</span><span class="p">,</span><span class="s">"--RotateNoCrop"</span><span class="p">,</span> <span class="n">nargs</span><span class="o">=</span><span class="s">'*'</span><span class="p">,</span> <span class="n">help</span><span class="o">=</span><span class="s">"rotate no cropping image, 0: angle"</span><span class="p">,</span> <span class="nb">type</span><span class="o">=</span><span class="nb">float</span><span class="p">)</span> 
<span class="n">parser</span><span class="p">.</span><span class="n">add_argument</span><span class="p">(</span><span class="s">"-r"</span><span class="p">,</span><span class="s">"--resize"</span><span class="p">,</span> <span class="n">nargs</span><span class="o">=</span><span class="s">'*'</span><span class="p">,</span> <span class="n">help</span><span class="o">=</span><span class="s">"resize image keeping the aspect ratio, use width"</span><span class="p">,</span> <span class="nb">type</span><span class="o">=</span><span class="nb">int</span><span class="p">)</span> 
<span class="n">args</span> <span class="o">=</span> <span class="nb">vars</span><span class="p">(</span><span class="n">parser</span><span class="p">.</span><span class="n">parse_args</span><span class="p">())</span>

<span class="n">image</span> <span class="o">=</span> <span class="n">cv2</span><span class="p">.</span><span class="n">imread</span><span class="p">(</span><span class="n">args</span><span class="p">[</span><span class="s">"image"</span><span class="p">])</span>
<span class="k">if</span> <span class="n">args</span><span class="p">[</span><span class="s">'Translate'</span><span class="p">]:</span>
    <span class="n">trax</span> <span class="o">=</span> <span class="n">args</span><span class="p">[</span><span class="s">'Translate'</span><span class="p">][</span><span class="mi">0</span><span class="p">]</span> <span class="c1"># x dimension, lateral
</span>    <span class="n">tray</span> <span class="o">=</span> <span class="n">args</span><span class="p">[</span><span class="s">'Translate'</span><span class="p">][</span><span class="mi">1</span><span class="p">]</span> <span class="c1"># y dimension, vertical
</span>    <span class="n">translated</span> <span class="o">=</span> <span class="n">imutils</span><span class="p">.</span><span class="n">translate</span><span class="p">(</span><span class="n">image</span><span class="p">,</span><span class="n">trax</span><span class="p">,</span><span class="n">tray</span><span class="p">)</span>
    <span class="n">cv2</span><span class="p">.</span><span class="n">imshow</span><span class="p">(</span><span class="s">"Translated image"</span><span class="p">,</span> <span class="n">translated</span><span class="p">)</span>
    <span class="n">cv2</span><span class="p">.</span><span class="n">waitKey</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span>

<span class="k">if</span> <span class="n">args</span><span class="p">[</span><span class="s">'Rotate'</span><span class="p">]:</span>
    <span class="n">rot</span> <span class="o">=</span> <span class="n">args</span><span class="p">[</span><span class="s">'Rotate'</span><span class="p">][</span><span class="mi">0</span><span class="p">]</span> <span class="c1"># clockwise is negative
</span>    <span class="n">rotated</span> <span class="o">=</span> <span class="n">imutils</span><span class="p">.</span><span class="n">rotate</span><span class="p">(</span><span class="n">image</span><span class="p">,</span> <span class="n">rot</span><span class="p">)</span> 
    <span class="n">cv2</span><span class="p">.</span><span class="n">imshow</span><span class="p">(</span><span class="s">"Rotated image"</span><span class="p">,</span> <span class="n">rotated</span><span class="p">)</span>
    <span class="n">cv2</span><span class="p">.</span><span class="n">waitKey</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span>

<span class="k">if</span> <span class="n">args</span><span class="p">[</span><span class="s">'RotateNoCrop'</span><span class="p">]:</span>
    <span class="c1"># the image is cropped due to opencv not caring about what we actually did to the image
</span>    <span class="c1"># this function preserves the whole size
</span>    <span class="n">rot</span> <span class="o">=</span> <span class="n">args</span><span class="p">[</span><span class="s">'RotateNoCrop'</span><span class="p">][</span><span class="mi">0</span><span class="p">]</span> <span class="c1"># clockwise is negative
</span>    <span class="n">rotated</span> <span class="o">=</span> <span class="n">imutils</span><span class="p">.</span><span class="n">rotate_bound</span><span class="p">(</span><span class="n">image</span><span class="p">,</span> <span class="n">rot</span><span class="p">)</span>
    <span class="n">cv2</span><span class="p">.</span><span class="n">imshow</span><span class="p">(</span><span class="s">"Rotated image"</span><span class="p">,</span> <span class="n">rotated</span><span class="p">)</span>
    <span class="n">cv2</span><span class="p">.</span><span class="n">waitKey</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span>

<span class="k">if</span> <span class="n">args</span><span class="p">[</span><span class="s">'resize'</span><span class="p">]:</span>
    <span class="c1"># to maintain aspect ratio is neccesary to compute the proportion and resize accordingly
</span>    <span class="c1"># with imutils a wrapper function does the job
</span>    <span class="n">ww</span> <span class="o">=</span> <span class="n">args</span><span class="p">[</span><span class="s">'resize'</span><span class="p">][</span><span class="mi">0</span><span class="p">]</span>
    <span class="n">resized</span> <span class="o">=</span> <span class="n">imutils</span><span class="p">.</span><span class="n">resize</span><span class="p">(</span><span class="n">image</span><span class="p">,</span> <span class="n">width</span><span class="o">=</span><span class="n">ww</span><span class="p">)</span> <span class="c1"># provide width or height
</span>    <span class="n">cv2</span><span class="p">.</span><span class="n">imshow</span><span class="p">(</span><span class="s">" Resize image"</span><span class="p">,</span> <span class="n">resized</span><span class="p">)</span>
    <span class="n">cv2</span><span class="p">.</span><span class="n">waitKey</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span>
</code></pre></div></div> <h3 id="smoothing">Smoothing</h3> <p>Remove the high frequency content of images (like sharp edges) to avoid confounding information that the algorithms might take as useful. Behind the scenes a kernel is applied to the image.</p> <p>A noisy image is full of specks (a sort of outlier), pixels that have different intensity values than their surroinding pixels. Spatial filtering is a neighborhood operation where is pixel value is changed based on neighboring values. A filter is a matrix that acts like a mask. When placed over a region of an image it creates a window around a pixel, and depending on the operation differing results are obtained. For instance, linear filter performs weighted average, multiplying the value of the filter and the image and summing them. These are sometimes called sliding window operations. You can increase the light sensitivity of a digital camera sensor to improve the brightness of a picture taken in low light. Many modern digital cameras (including mobile phone cameras) automatically increase the ISO (camera setting) in dim light. However, this increase in sensitivity amplifies noise picked up by the sensor, leaving the image grainy. This noise can interfere with text identification by polluting regions in the binarized image.</p> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># blurring_gauss.py
</span><span class="kn">import</span> <span class="nn">cv2</span>
<span class="kn">import</span> <span class="nn">argparse</span>

<span class="c1"># parsing command line
</span><span class="n">parser</span> <span class="o">=</span> <span class="n">argparse</span><span class="p">.</span><span class="n">ArgumentParser</span><span class="p">(</span><span class="n">description</span><span class="o">=</span><span class="s">"Blurred image through gaussian filter"</span><span class="p">)</span>
<span class="n">parser</span><span class="p">.</span><span class="n">add_argument</span><span class="p">(</span><span class="s">"-i"</span><span class="p">,</span><span class="s">"--image"</span><span class="p">,</span> <span class="n">required</span><span class="o">=</span><span class="bp">True</span><span class="p">,</span> <span class="n">help</span><span class="o">=</span><span class="s">"path of the image"</span><span class="p">)</span> 
<span class="n">args</span> <span class="o">=</span> <span class="nb">vars</span><span class="p">(</span><span class="n">parser</span><span class="p">.</span><span class="n">parse_args</span><span class="p">())</span>

<span class="n">image</span> <span class="o">=</span> <span class="n">cv2</span><span class="p">.</span><span class="n">imread</span><span class="p">(</span><span class="n">args</span><span class="p">[</span><span class="s">"image"</span><span class="p">])</span>
<span class="n">blurred</span> <span class="o">=</span> <span class="n">cv2</span><span class="p">.</span><span class="n">GaussianBlur</span><span class="p">(</span><span class="n">image</span><span class="p">,</span> <span class="p">(</span><span class="mi">11</span><span class="p">,</span> <span class="mi">11</span><span class="p">),</span> <span class="mi">0</span><span class="p">)</span>
<span class="c1"># gaussian with 11x11 kernel with 0 standard deviation in both x-y
</span><span class="n">cv2</span><span class="p">.</span><span class="n">imshow</span><span class="p">(</span><span class="s">"Blurred"</span><span class="p">,</span> <span class="n">blurred</span><span class="p">)</span>
<span class="n">cv2</span><span class="p">.</span><span class="n">waitKey</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span>
</code></pre></div></div> <h3 id="little-project-for-image-processing">Little project for image processing</h3> <p>We are going to develop a little script for counting the shapes in an image. For that we need to follow several steps.</p> <ul> <li> <p>Gray image. When loaded into memory, a grayscale image occupies a third of the space required for an RGB image, requiring less computational power to process and can reduce computation time. Also, since grayscale images are conceptually simpler than RGB images, the development of an image processing algorithm can be more straightforward. On the other hand, if we wanted to classify objects by color, the color RGB would be essential. <em>Luminance</em> is a photometric measure of the luminous intensity per unit area of light travelling in a given direction. It describes the amount of light that passes through, is emitted from, or is reflected from a particular area. <em>Brightness</em> is the term for the subjective impression of the objective luminance measurement standard. <em>Contrast</em> is the difference in luminance or color that makes an object distinguishable. It is determined by the difference in the color and brightness of the object and other objects within the same field of view. The maximum contrast of an image is the contrast ratio or dynamic range.</p> </li> <li> <p>Separating an image into distinct parts is called segmenting (differentiation) an image. This performed by edge detection, using texture differences, shapes and sizes, by color (green screens behind), etc. The idea is that you want a region of interest ROI, and remove/ignore the rest. This is where a mask comes in; a binary mask is a logical array that indicates the ROI, with 1s the pixels you want to keep and 0s the one to ignore/remove. You can create a binary black and white image from a grayscale image by thresholding its intensity values. Values below the cutoff are assigned the value 0, while those above are assigned the value 1.</p> </li> </ul> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="nn">argparse</span>
<span class="kn">import</span> <span class="nn">imutils</span>
<span class="kn">import</span> <span class="nn">cv2</span>

<span class="n">ap</span> <span class="o">=</span> <span class="n">argparse</span><span class="p">.</span><span class="n">ArgumentParser</span><span class="p">()</span>
<span class="n">ap</span><span class="p">.</span><span class="n">add_argument</span><span class="p">(</span><span class="s">"-i"</span><span class="p">,</span> <span class="s">"--image"</span><span class="p">,</span> <span class="n">required</span><span class="o">=</span><span class="bp">True</span><span class="p">,</span>
	<span class="n">help</span><span class="o">=</span><span class="s">"specify path to input image, relative or global"</span><span class="p">)</span>
<span class="n">args</span> <span class="o">=</span> <span class="nb">vars</span><span class="p">(</span><span class="n">ap</span><span class="p">.</span><span class="n">parse_args</span><span class="p">())</span>

<span class="n">image</span> <span class="o">=</span> <span class="n">cv2</span><span class="p">.</span><span class="n">imread</span><span class="p">(</span><span class="n">args</span><span class="p">[</span><span class="s">"image"</span><span class="p">])</span> <span class="c1"># args["image"] = args.image
</span><span class="p">(</span><span class="n">h</span><span class="p">,</span> <span class="n">w</span><span class="p">,</span> <span class="n">d</span><span class="p">)</span> <span class="o">=</span> <span class="n">image</span><span class="p">.</span><span class="n">shape</span>
<span class="n">cv2</span><span class="p">.</span><span class="n">imshow</span><span class="p">(</span><span class="s">'Original'</span><span class="p">,</span> <span class="n">image</span><span class="p">)</span>

<span class="c1">### Converting to grayscale for edge detection and thresholding
</span><span class="n">gray</span> <span class="o">=</span> <span class="n">cv2</span><span class="p">.</span><span class="n">cvtColor</span><span class="p">(</span><span class="n">image</span><span class="p">,</span> <span class="n">cv2</span><span class="p">.</span><span class="n">COLOR_BGR2GRAY</span><span class="p">)</span>
<span class="n">cv2</span><span class="p">.</span><span class="n">imshow</span><span class="p">(</span><span class="s">'Gray'</span><span class="p">,</span> <span class="n">gray</span><span class="p">)</span>
<span class="n">cv2</span><span class="p">.</span><span class="n">waitKey</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span>

<span class="c1">### Edge detecion with Canny algorithm
</span><span class="n">edged</span> <span class="o">=</span> <span class="n">cv2</span><span class="p">.</span><span class="n">Canny</span><span class="p">(</span><span class="n">gray</span><span class="p">,</span> <span class="mi">30</span><span class="p">,</span> <span class="mi">150</span><span class="p">)</span>
<span class="c1"># min threshold, max threshold, and sobel kernel size (default 3)
# sobel filter: discrete differentiation operator, computing an 
# approximation of the gradient of the image intensity function, enhancing high freq variations
</span><span class="n">cv2</span><span class="p">.</span><span class="n">imshow</span><span class="p">(</span><span class="s">"Edged"</span><span class="p">,</span> <span class="n">edged</span><span class="p">)</span>
<span class="n">cv2</span><span class="p">.</span><span class="n">waitKey</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span>

<span class="c1">### Thresholding
# used to remove dark or light areas and highlight some regions
# binary inverse threshold: in the image all pixel values less than 225
# to 255 (white; foreground) and all pixel values &gt;= 225 to 255
# (black; background), thereby segmenting the image, critical step for finding contours
</span><span class="n">thresh</span> <span class="o">=</span> <span class="n">cv2</span><span class="p">.</span><span class="n">threshold</span><span class="p">(</span><span class="n">gray</span><span class="p">,</span> <span class="mi">225</span><span class="p">,</span> <span class="mi">255</span><span class="p">,</span> <span class="n">cv2</span><span class="p">.</span><span class="n">THRESH_BINARY_INV</span><span class="p">)[</span><span class="mi">1</span><span class="p">]</span>
<span class="n">cv2</span><span class="p">.</span><span class="n">imshow</span><span class="p">(</span><span class="s">"Thresh"</span><span class="p">,</span> <span class="n">thresh</span><span class="p">)</span>
<span class="n">cv2</span><span class="p">.</span><span class="n">waitKey</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span>

<span class="c1">### Detecting contours
# using the thresholded image find the outlining
</span><span class="n">cnts</span> <span class="o">=</span> <span class="n">cv2</span><span class="p">.</span><span class="n">findContours</span><span class="p">(</span><span class="n">thresh</span><span class="p">.</span><span class="n">copy</span><span class="p">(),</span> <span class="n">cv2</span><span class="p">.</span><span class="n">RETR_EXTERNAL</span><span class="p">,</span>
	<span class="n">cv2</span><span class="p">.</span><span class="n">CHAIN_APPROX_SIMPLE</span><span class="p">)</span>
<span class="c1"># simply finding white px in a copy of thresh
</span><span class="n">cnts</span> <span class="o">=</span> <span class="n">imutils</span><span class="p">.</span><span class="n">grab_contours</span><span class="p">(</span><span class="n">cnts</span><span class="p">)</span>
<span class="c1"># compatibility wrapper for previous versions
</span><span class="n">output</span> <span class="o">=</span> <span class="n">image</span><span class="p">.</span><span class="n">copy</span><span class="p">()</span>
<span class="c1"># make copy when drawing over images
</span><span class="k">for</span> <span class="n">c</span> <span class="ow">in</span> <span class="n">cnts</span><span class="p">:</span>
	<span class="c1"># draw each contour on the output image with a 3px thick purple
</span>	<span class="c1"># outline, then display the output contours one at a time
</span>	<span class="n">cv2</span><span class="p">.</span><span class="n">drawContours</span><span class="p">(</span><span class="n">output</span><span class="p">,</span> <span class="p">[</span><span class="n">c</span><span class="p">],</span> <span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="p">(</span><span class="mi">240</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">159</span><span class="p">),</span> <span class="mi">3</span><span class="p">)</span>
<span class="c1">#     cv2.imshow("Contours", output)
# 	cv2.waitKey(0)
</span>    
<span class="n">text</span> <span class="o">=</span> <span class="sa">f</span><span class="s">"</span><span class="si">{</span><span class="nb">len</span><span class="p">(</span><span class="n">cnts</span><span class="p">)</span><span class="si">}</span><span class="s"> objects found!"</span>
<span class="n">cv2</span><span class="p">.</span><span class="n">putText</span><span class="p">(</span><span class="n">output</span><span class="p">,</span> <span class="n">text</span><span class="p">,</span> <span class="p">(</span><span class="mi">10</span><span class="p">,</span> <span class="mi">25</span><span class="p">),</span>  <span class="n">cv2</span><span class="p">.</span><span class="n">FONT_HERSHEY_SIMPLEX</span><span class="p">,</span> <span class="mf">0.7</span><span class="p">,</span>
	<span class="p">(</span><span class="mi">240</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">159</span><span class="p">),</span> <span class="mi">2</span><span class="p">)</span>
<span class="n">cv2</span><span class="p">.</span><span class="n">imshow</span><span class="p">(</span><span class="s">"Contours"</span><span class="p">,</span> <span class="n">output</span><span class="p">)</span>
<span class="n">cv2</span><span class="p">.</span><span class="n">waitKey</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span>

<span class="c1">### Erosions and dilations
# To reduce noise in thresholded binary images
# we apply erosions to reduce the size of foreground objects (eroding pixels)
# useful for removing some blobs or undesired objects
</span><span class="n">mask</span> <span class="o">=</span> <span class="n">thresh</span><span class="p">.</span><span class="n">copy</span><span class="p">()</span>
<span class="n">mask</span> <span class="o">=</span> <span class="n">cv2</span><span class="p">.</span><span class="n">erode</span><span class="p">(</span><span class="n">mask</span><span class="p">,</span> <span class="bp">None</span><span class="p">,</span> <span class="n">iterations</span><span class="o">=</span><span class="mi">5</span><span class="p">)</span>
<span class="c1"># 5 iterations for reducing size
</span><span class="n">cv2</span><span class="p">.</span><span class="n">imshow</span><span class="p">(</span><span class="s">"Eroded"</span><span class="p">,</span> <span class="n">mask</span><span class="p">)</span>
<span class="c1"># cv2.waitKey(0)
</span>
<span class="c1"># Similarly dilations enlarge the ground and can combine foreground objects (nearby contours) when interested
</span><span class="n">mask</span> <span class="o">=</span> <span class="n">thresh</span><span class="p">.</span><span class="n">copy</span><span class="p">()</span>
<span class="n">mask</span> <span class="o">=</span> <span class="n">cv2</span><span class="p">.</span><span class="n">dilate</span><span class="p">(</span><span class="n">mask</span><span class="p">,</span> <span class="bp">None</span><span class="p">,</span> <span class="n">iterations</span><span class="o">=</span><span class="mi">5</span><span class="p">)</span>
<span class="n">cv2</span><span class="p">.</span><span class="n">imshow</span><span class="p">(</span><span class="s">"Dilated"</span><span class="p">,</span> <span class="n">mask</span><span class="p">)</span>
<span class="n">cv2</span><span class="p">.</span><span class="n">waitKey</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span>

<span class="c1">### Masking
# Mask out or hide regions we are not interested in, maybe to enchance some feature or the image.
</span><span class="n">mask</span> <span class="o">=</span> <span class="n">thresh</span><span class="p">.</span><span class="n">copy</span><span class="p">()</span>
<span class="n">output</span> <span class="o">=</span> <span class="n">cv2</span><span class="p">.</span><span class="n">bitwise_and</span><span class="p">(</span><span class="n">image</span><span class="p">,</span> <span class="n">image</span><span class="p">,</span> <span class="n">mask</span><span class="o">=</span><span class="n">mask</span><span class="p">)</span>
<span class="n">cv2</span><span class="p">.</span><span class="n">imshow</span><span class="p">(</span><span class="s">"Output"</span><span class="p">,</span> <span class="n">output</span><span class="p">)</span>
<span class="n">cv2</span><span class="p">.</span><span class="n">waitKey</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span>
</code></pre></div></div>]]></content><author><name></name></author><category term="python"/><category term="consult"/><summary type="html"><![CDATA[openCV]]></summary></entry><entry><title type="html">Command line arguments</title><link href="https://jotorpe.github.io/blog/2022/argparse/" rel="alternate" type="text/html" title="Command line arguments"/><published>2022-12-27T00:00:00+00:00</published><updated>2022-12-27T00:00:00+00:00</updated><id>https://jotorpe.github.io/blog/2022/argparse</id><content type="html" xml:base="https://jotorpe.github.io/blog/2022/argparse/"><![CDATA[<h1 id="parsing-the-command-line-arguments">Parsing the command line arguments</h1> <p>As an example <code class="language-plaintext highlighter-rouge">ls</code> by default displays the contents of the directory. It can be given a positional argument, so called because the command knows what to do based only on its position. The difference with optional arguments is that they will have a default value, which implies that it is not strictly necessary to provide one. We can change the behavior by providing optional <code class="language-plaintext highlighter-rouge">ls -l</code> arguments. A very useful thing to do is to invoke the help text to find out how <code class="language-plaintext highlighter-rouge">ls --help</code> = <code class="language-plaintext highlighter-rouge">ls -h</code> works.</p> <p>This is called command line arguments, flags we provide to scripts to run on the fly, so there is no need to change code inside. In a script this can be achieved simply by using the <code class="language-plaintext highlighter-rouge">sys</code> module or the more customizable <code class="language-plaintext highlighter-rouge">argparse</code>.</p> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="nn">sys</span>
<span class="c1"># sys.argv: generates a list with the arguments passed to the script
</span><span class="k">print</span><span class="p">(</span><span class="s">"This is the name of the script: "</span><span class="p">,</span> <span class="n">sys</span><span class="p">.</span><span class="n">argv</span><span class="p">[</span><span class="mi">0</span><span class="p">])</span> <span class="c1"># 0 is the script name
# the following arguments will be 1,2..
</span><span class="k">print</span><span class="p">(</span><span class="s">"Number of arguments: "</span><span class="p">,</span> <span class="nb">len</span><span class="p">(</span><span class="n">sys</span><span class="p">.</span><span class="n">argv</span><span class="p">))</span>
<span class="k">print</span><span class="p">(</span><span class="s">"The arguments are: "</span> <span class="p">,</span> <span class="nb">str</span><span class="p">(</span><span class="n">sys</span><span class="p">.</span><span class="n">argv</span><span class="p">))</span>
</code></pre></div></div> <p>Thanks to <code class="language-plaintext highlighter-rouge">argparse</code> we can handle the absence or presence of arguments, especially when some of them are required to work. The <code class="language-plaintext highlighter-rouge">-h</code> argument help will always be available, and will give us help to manage the program.</p> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="nn">argparse</span>
<span class="n">parser</span> <span class="o">=</span> <span class="n">argparse</span><span class="p">.</span><span class="n">ArgumentParser</span><span class="p">()</span> <span class="c1"># construct object and instatiate
</span><span class="n">parser</span><span class="p">.</span><span class="n">add_argument</span><span class="p">(</span><span class="s">"-e"</span><span class="p">,</span><span class="s">"--echo"</span><span class="p">,</span> <span class="n">required</span><span class="o">=</span><span class="bp">True</span><span class="p">,</span> <span class="n">help</span><span class="o">=</span><span class="s">"echo the string you use here"</span><span class="p">)</span> 
<span class="c1"># short and long names, required True if not error, help string from the variable
</span><span class="n">args</span> <span class="o">=</span> <span class="nb">vars</span><span class="p">(</span><span class="n">parser</span><span class="p">.</span><span class="n">parse_args</span><span class="p">())</span> <span class="c1"># method to return data
# as dictionary with key:value, easy reading
</span><span class="k">print</span><span class="p">(</span><span class="n">args</span><span class="p">.</span><span class="n">echo</span><span class="p">)</span>
<span class="c1"># variable names are called without '-'
</span>
<span class="c1">### python filename.py -e "hi there"
### python filename.py --echo "hi there"
</span></code></pre></div></div> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">parser</span> <span class="o">=</span> <span class="n">argparse</span><span class="p">.</span><span class="n">ArgumentParser</span><span class="p">(</span><span class="n">description</span><span class="o">=</span><span class="s">"calculate X to the power of Y"</span><span class="p">)</span> 
<span class="c1"># object creation and description (-h)
</span><span class="n">group</span> <span class="o">=</span> <span class="n">parser</span><span class="p">.</span><span class="n">add_mutually_exclusive_group</span><span class="p">()</span> 
<span class="c1"># add mutually exclusive arg, both cannot be used at the same time
</span><span class="n">group</span><span class="p">.</span><span class="n">add_argument</span><span class="p">(</span><span class="s">"-v"</span><span class="p">,</span> <span class="s">"--verbose"</span><span class="p">,</span> <span class="n">action</span><span class="o">=</span><span class="s">"store_true"</span><span class="p">)</span> 
<span class="c1"># save boolean value for further processing
</span><span class="n">group</span><span class="p">.</span><span class="n">add_argument</span><span class="p">(</span><span class="s">"-q"</span><span class="p">,</span> <span class="s">"--quiet"</span><span class="p">,</span> <span class="n">action</span><span class="o">=</span><span class="s">"store_true"</span><span class="p">)</span>
<span class="n">parser</span><span class="p">.</span><span class="n">add_argument</span><span class="p">(</span><span class="s">"x"</span><span class="p">,</span> <span class="nb">type</span><span class="o">=</span><span class="nb">int</span><span class="p">,</span> <span class="n">help</span><span class="o">=</span><span class="s">"the base"</span><span class="p">)</span> 
<span class="c1"># positional arguments, order matter if there are more than one
</span><span class="n">parser</span><span class="p">.</span><span class="n">add_argument</span><span class="p">(</span><span class="s">"y"</span><span class="p">,</span> <span class="nb">type</span><span class="o">=</span><span class="nb">int</span><span class="p">,</span> <span class="n">help</span><span class="o">=</span><span class="s">"the exponent"</span><span class="p">)</span>
<span class="n">args</span> <span class="o">=</span> <span class="n">parser</span><span class="p">.</span><span class="n">parse_args</span><span class="p">()</span> <span class="c1"># method to return data
</span><span class="n">answer</span> <span class="o">=</span> <span class="n">args</span><span class="p">.</span><span class="n">x</span><span class="o">**</span><span class="n">args</span><span class="p">.</span><span class="n">y</span>

<span class="k">if</span> <span class="n">args</span><span class="p">.</span><span class="n">quiet</span><span class="p">:</span>
    <span class="k">print</span><span class="p">(</span><span class="n">answer</span><span class="p">)</span>
<span class="k">elif</span> <span class="n">args</span><span class="p">.</span><span class="n">verbose</span><span class="p">:</span>
    <span class="k">print</span><span class="p">(</span><span class="sa">f</span><span class="s">"</span><span class="si">{</span><span class="n">args</span><span class="p">.</span><span class="n">x</span><span class="si">}</span><span class="s"> to the power </span><span class="si">{</span><span class="n">args</span><span class="p">.</span><span class="n">y</span><span class="si">}</span><span class="s"> equals </span><span class="si">{</span><span class="n">answer</span><span class="si">}</span><span class="s">"</span><span class="p">)</span>
<span class="k">else</span><span class="p">:</span>
    <span class="k">print</span><span class="p">(</span><span class="sa">f</span><span class="s">"</span><span class="si">{</span><span class="n">args</span><span class="p">.</span><span class="n">x</span><span class="si">}</span><span class="s">^</span><span class="si">{</span><span class="n">args</span><span class="p">.</span><span class="n">y</span><span class="si">}</span><span class="s"> == </span><span class="si">{</span><span class="n">answer</span><span class="si">}</span><span class="s">"</span><span class="p">)</span>
    
<span class="c1">### python script.py 2 3 -v
# order of optional args wont matter, but it will for positional args
</span></code></pre></div></div> <p>This module includes more options, such as the type of data to include, optional arguments and actions. This actions trigger some other effect depending on the selected option:</p> <ul> <li> <p>store: Save the value, after optionally converting it to a different type. This is the default action taken if none is specified explicitly.</p> </li> <li> <p>store_true/store_false: Save the appropriate boolean value.</p> </li> <li> <p>store_const: Save a value defined as part of the argument specification, rather than a value that comes from the arguments being parsed. This is typically used to implement command line flags that aren’t booleans.</p> </li> <li> <p>append: Save the value to a list. Multiple values are saved if the argument is repeated.</p> </li> <li> <p>append_const: Save a value defined in the argument specification to a list.</p> </li> <li> <p>version: Prints version details about the program and then exits.</p> </li> </ul> <p>To add several arguments to our command we need the flag <code class="language-plaintext highlighter-rouge">nargs</code> (number of arguments).</p> <ul> <li>2: 2 values, can be any number you want</li> <li>?: a single value, which can be optional</li> <li>*: a flexible number of values, which will be gathered into a list</li> <li>+: like *, but requiring at least one value</li> </ul> <p>And if only one type of argument is needed we use <code class="language-plaintext highlighter-rouge">type=float</code>, adapting to our needs.</p>]]></content><author><name></name></author><category term="python"/><category term="consult"/><summary type="html"><![CDATA[argparse]]></summary></entry><entry><title type="html">Numpy basics</title><link href="https://jotorpe.github.io/blog/2022/numpy/" rel="alternate" type="text/html" title="Numpy basics"/><published>2022-12-19T00:00:00+00:00</published><updated>2022-12-19T00:00:00+00:00</updated><id>https://jotorpe.github.io/blog/2022/numpy</id><content type="html" xml:base="https://jotorpe.github.io/blog/2022/numpy/"><![CDATA[]]></content><author><name></name></author><category term="python"/><category term="consult"/><summary type="html"><![CDATA[the library numpy]]></summary></entry><entry><title type="html">a post with diagrams</title><link href="https://jotorpe.github.io/blog/2021/diagrams/" rel="alternate" type="text/html" title="a post with diagrams"/><published>2021-07-04T17:39:00+00:00</published><updated>2021-07-04T17:39:00+00:00</updated><id>https://jotorpe.github.io/blog/2021/diagrams</id><content type="html" xml:base="https://jotorpe.github.io/blog/2021/diagrams/"><![CDATA[<p>This theme supports generating various diagrams from a text description using <a href="https://github.com/zhustec/jekyll-diagrams" target="\_blank">jekyll-diagrams</a> plugin. Below, we generate a few examples of such diagrams using languages such as <a href="https://mermaid-js.github.io/mermaid/" target="\_blank">mermaid</a>, <a href="https://plantuml.com/" target="\_blank">plantuml</a>, <a href="https://vega.github.io/vega-lite/" target="\_blank">vega-lite</a>, etc.</p> <p><strong>Note:</strong> different diagram-generation packages require external dependencies to be installed on your machine. Also, be mindful of that because of diagram generation the fist time you build your Jekyll website after adding new diagrams will be SLOW. For any other details, please refer to <a href="https://github.com/zhustec/jekyll-diagrams" target="\_blank">jekyll-diagrams</a> README.</p> <h2 id="mermaid">Mermaid</h2> <p>Install mermaid using <code class="language-plaintext highlighter-rouge">node.js</code> package manager <code class="language-plaintext highlighter-rouge">npm</code> by running the following command:</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>npm <span class="nb">install</span> <span class="nt">-g</span> mermaid.cli
</code></pre></div></div> <p>The diagram below was generated by the following code:</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>{% mermaid %}
sequenceDiagram
    participant John
    participant Alice
    Alice-&gt;&gt;John: Hello John, how are you?
    John--&gt;&gt;Alice: Great!
{% endmermaid %}
</code></pre></div></div> <div class="jekyll-diagrams diagrams mermaid"> <svg id="mermaid-1672941814394" width="100%" xmlns="http://www.w3.org/2000/svg" height="100%" style="max-width:450px;" viewBox="-50 -10 450 231"><style>#mermaid-1672941814394 .label{font-family:trebuchet ms,verdana,arial;color:#333}#mermaid-1672941814394 .node circle,#mermaid-1672941814394 .node ellipse,#mermaid-1672941814394 .node polygon,#mermaid-1672941814394 .node rect{fill:#ececff;stroke:#9370db;stroke-width:1px}#mermaid-1672941814394 .node.clickable{cursor:pointer}#mermaid-1672941814394 .arrowheadPath{fill:#333}#mermaid-1672941814394 .edgePath .path{stroke:#333;stroke-width:1.5px}#mermaid-1672941814394 .edgeLabel{background-color:#e8e8e8}#mermaid-1672941814394 .cluster rect{fill:#ffffde!important;stroke:#aa3!important;stroke-width:1px!important}#mermaid-1672941814394 .cluster text{fill:#333}#mermaid-1672941814394 div.mermaidTooltip{position:absolute;text-align:center;max-width:200px;padding:2px;font-family:trebuchet ms,verdana,arial;font-size:12px;background:#ffffde;border:1px solid #aa3;border-radius:2px;pointer-events:none;z-index:100}#mermaid-1672941814394 .actor{stroke:#ccf;fill:#ececff}#mermaid-1672941814394 text.actor{fill:#000;stroke:none}#mermaid-1672941814394 .actor-line{stroke:grey}#mermaid-1672941814394 .messageLine0{marker-end:"url(#arrowhead)"}#mermaid-1672941814394 .messageLine0,#mermaid-1672941814394 .messageLine1{stroke-width:1.5;stroke-dasharray:"2 2";stroke:#333}#mermaid-1672941814394 #arrowhead{fill:#333}#mermaid-1672941814394 #crosshead path{fill:#333!important;stroke:#333!important}#mermaid-1672941814394 .messageText{fill:#333;stroke:none}#mermaid-1672941814394 .labelBox{stroke:#ccf;fill:#ececff}#mermaid-1672941814394 .labelText,#mermaid-1672941814394 .loopText{fill:#000;stroke:none}#mermaid-1672941814394 .loopLine{stroke-width:2;stroke-dasharray:"2 2";marker-end:"url(#arrowhead)";stroke:#ccf}#mermaid-1672941814394 .note{stroke:#aa3;fill:#fff5ad}#mermaid-1672941814394 .noteText{fill:#000;stroke:none;font-family:trebuchet ms,verdana,arial;font-size:14px}#mermaid-1672941814394 .section{stroke:none;opacity:.2}#mermaid-1672941814394 .section0{fill:rgba(102,102,255,.49)}#mermaid-1672941814394 .section2{fill:#fff400}#mermaid-1672941814394 .section1,#mermaid-1672941814394 .section3{fill:#fff;opacity:.2}#mermaid-1672941814394 .sectionTitle0,#mermaid-1672941814394 .sectionTitle1,#mermaid-1672941814394 .sectionTitle2,#mermaid-1672941814394 .sectionTitle3{fill:#333}#mermaid-1672941814394 .sectionTitle{text-anchor:start;font-size:11px;text-height:14px}#mermaid-1672941814394 .grid .tick{stroke:#d3d3d3;opacity:.3;shape-rendering:crispEdges}#mermaid-1672941814394 .grid path{stroke-width:0}#mermaid-1672941814394 .today{fill:none;stroke:red;stroke-width:2px}#mermaid-1672941814394 .task{stroke-width:2}#mermaid-1672941814394 .taskText{text-anchor:middle;font-size:11px}#mermaid-1672941814394 .taskTextOutsideRight{fill:#000;text-anchor:start;font-size:11px}#mermaid-1672941814394 .taskTextOutsideLeft{fill:#000;text-anchor:end;font-size:11px}#mermaid-1672941814394 .taskText0,#mermaid-1672941814394 .taskText1,#mermaid-1672941814394 .taskText2,#mermaid-1672941814394 .taskText3{fill:#fff}#mermaid-1672941814394 .task0,#mermaid-1672941814394 .task1,#mermaid-1672941814394 .task2,#mermaid-1672941814394 .task3{fill:#8a90dd;stroke:#534fbc}#mermaid-1672941814394 .taskTextOutside0,#mermaid-1672941814394 .taskTextOutside1,#mermaid-1672941814394 .taskTextOutside2,#mermaid-1672941814394 .taskTextOutside3{fill:#000}#mermaid-1672941814394 .active0,#mermaid-1672941814394 .active1,#mermaid-1672941814394 .active2,#mermaid-1672941814394 .active3{fill:#bfc7ff;stroke:#534fbc}#mermaid-1672941814394 .activeText0,#mermaid-1672941814394 .activeText1,#mermaid-1672941814394 .activeText2,#mermaid-1672941814394 .activeText3{fill:#000!important}#mermaid-1672941814394 .done0,#mermaid-1672941814394 .done1,#mermaid-1672941814394 .done2,#mermaid-1672941814394 .done3{stroke:grey;fill:#d3d3d3;stroke-width:2}#mermaid-1672941814394 .doneText0,#mermaid-1672941814394 .doneText1,#mermaid-1672941814394 .doneText2,#mermaid-1672941814394 .doneText3{fill:#000!important}#mermaid-1672941814394 .crit0,#mermaid-1672941814394 .crit1,#mermaid-1672941814394 .crit2,#mermaid-1672941814394 .crit3{stroke:#f88;fill:red;stroke-width:2}#mermaid-1672941814394 .activeCrit0,#mermaid-1672941814394 .activeCrit1,#mermaid-1672941814394 .activeCrit2,#mermaid-1672941814394 .activeCrit3{stroke:#f88;fill:#bfc7ff;stroke-width:2}#mermaid-1672941814394 .doneCrit0,#mermaid-1672941814394 .doneCrit1,#mermaid-1672941814394 .doneCrit2,#mermaid-1672941814394 .doneCrit3{stroke:#f88;fill:#d3d3d3;stroke-width:2;cursor:pointer;shape-rendering:crispEdges}#mermaid-1672941814394 .activeCritText0,#mermaid-1672941814394 .activeCritText1,#mermaid-1672941814394 .activeCritText2,#mermaid-1672941814394 .activeCritText3,#mermaid-1672941814394 .doneCritText0,#mermaid-1672941814394 .doneCritText1,#mermaid-1672941814394 .doneCritText2,#mermaid-1672941814394 .doneCritText3{fill:#000!important}#mermaid-1672941814394 .titleText{text-anchor:middle;font-size:18px;fill:#000}
#mermaid-1672941814394 g.classGroup text{fill:#9370db;stroke:none;font-family:trebuchet ms,verdana,arial;font-size:10px}#mermaid-1672941814394 g.classGroup rect{fill:#ececff;stroke:#9370db}#mermaid-1672941814394 g.classGroup line{stroke:#9370db;stroke-width:1}#mermaid-1672941814394 .classLabel .box{stroke:none;stroke-width:0;fill:#ececff;opacity:.5}#mermaid-1672941814394 .classLabel .label{fill:#9370db;font-size:10px}#mermaid-1672941814394 .relation{stroke:#9370db;stroke-width:1;fill:none}#mermaid-1672941814394 #compositionEnd,#mermaid-1672941814394 #compositionStart{fill:#9370db;stroke:#9370db;stroke-width:1}#mermaid-1672941814394 #aggregationEnd,#mermaid-1672941814394 #aggregationStart{fill:#ececff;stroke:#9370db;stroke-width:1}#mermaid-1672941814394 #dependencyEnd,#mermaid-1672941814394 #dependencyStart,#mermaid-1672941814394 #extensionEnd,#mermaid-1672941814394 #extensionStart{fill:#9370db;stroke:#9370db;stroke-width:1}#mermaid-1672941814394 .branch-label,#mermaid-1672941814394 .commit-id,#mermaid-1672941814394 .commit-msg{fill:#d3d3d3;color:#d3d3d3}</style><style>#mermaid-1672941814394{color:#000;font:normal normal 400 normal 16px / normal "Times New Roman"}</style><g></g><g><line id="actor0" x1="75" y1="5" x2="75" y2="220" class="actor-line" stroke-width="0.5px" stroke="#999"></line><rect x="0" y="0" fill="#eaeaea" stroke="#666" width="150" height="65" rx="3" ry="3" class="actor"></rect><text x="75" y="32.5" dominant-baseline="central" alignment-baseline="central" class="actor" style="text-anchor: middle;"><tspan x="75" dy="0">John</tspan></text></g><g><line id="actor1" x1="275" y1="5" x2="275" y2="220" class="actor-line" stroke-width="0.5px" stroke="#999"></line><rect x="200" y="0" fill="#eaeaea" stroke="#666" width="150" height="65" rx="3" ry="3" class="actor"></rect><text x="275" y="32.5" dominant-baseline="central" alignment-baseline="central" class="actor" style="text-anchor: middle;"><tspan x="275" dy="0">Alice</tspan></text></g><defs><marker id="arrowhead" refX="5" refY="2" markerWidth="6" markerHeight="4" orient="auto"><path d="M 0,0 V 4 L6,2 Z"></path></marker></defs><defs><marker id="crosshead" markerWidth="15" markerHeight="8" orient="auto" refX="16" refY="4"><path fill="black" stroke="#000000" stroke-width="1px" d="M 9,2 V 6 L16,4 Z" style="stroke-dasharray: 0, 0;"></path><path fill="none" stroke="#000000" stroke-width="1px" d="M 0,1 L 6,7 M 6,1 L 0,7" style="stroke-dasharray: 0, 0;"></path></marker></defs><g><text x="175" y="93" class="messageText" style="text-anchor: middle;">Hello John, how are you?</text><line x1="275" y1="100" x2="75" y2="100" class="messageLine0" stroke-width="2" stroke="black" marker-end="url(#arrowhead)" style="fill: none;"></line></g><g><text x="175" y="128" class="messageText" style="text-anchor: middle;">Great!</text><line x1="75" y1="135" x2="275" y2="135" class="messageLine1" stroke-width="2" stroke="black" marker-end="url(#arrowhead)" style="stroke-dasharray: 3, 3; fill: none;"></line></g><g><rect x="0" y="155" fill="#eaeaea" stroke="#666" width="150" height="65" rx="3" ry="3" class="actor"></rect><text x="75" y="187.5" dominant-baseline="central" alignment-baseline="central" class="actor" style="text-anchor: middle;"><tspan x="75" dy="0">John</tspan></text></g><g><rect x="200" y="155" fill="#eaeaea" stroke="#666" width="150" height="65" rx="3" ry="3" class="actor"></rect><text x="275" y="187.5" dominant-baseline="central" alignment-baseline="central" class="actor" style="text-anchor: middle;"><tspan x="275" dy="0">Alice</tspan></text></g></svg> </div>]]></content><author><name></name></author><summary type="html"><![CDATA[an example of a blog post with diagrams]]></summary></entry><entry><title type="html">a post with redirect</title><link href="https://jotorpe.github.io/blog/2021/redirect/" rel="alternate" type="text/html" title="a post with redirect"/><published>2021-07-04T17:39:00+00:00</published><updated>2021-07-04T17:39:00+00:00</updated><id>https://jotorpe.github.io/blog/2021/redirect</id><content type="html" xml:base="https://jotorpe.github.io/blog/2021/redirect/"><![CDATA[]]></content><author><name></name></author><summary type="html"><![CDATA[you can also redirect to assets like pdf]]></summary></entry><entry><title type="html">a distill-style blog post</title><link href="https://jotorpe.github.io/blog/2021/distill/" rel="alternate" type="text/html" title="a distill-style blog post"/><published>2021-05-22T00:00:00+00:00</published><updated>2021-05-22T00:00:00+00:00</updated><id>https://jotorpe.github.io/blog/2021/distill</id><content type="html" xml:base="https://jotorpe.github.io/blog/2021/distill/"><![CDATA[<h2 id="equations">Equations</h2> <p>This theme supports rendering beautiful math in inline and display modes using <a href="https://www.mathjax.org/">MathJax 3</a> engine. You just need to surround your math expression with <code class="language-plaintext highlighter-rouge">$$</code>, like <code class="language-plaintext highlighter-rouge">$$ E = mc^2 $$</code>. If you leave it inside a paragraph, it will produce an inline expression, just like \(E = mc^2\).</p> <p>To use display mode, again surround your expression with <code class="language-plaintext highlighter-rouge">$$</code> and place it as a separate paragraph. Here is an example:</p> \[\left( \sum_{k=1}^n a_k b_k \right)^2 \leq \left( \sum_{k=1}^n a_k^2 \right) \left( \sum_{k=1}^n b_k^2 \right)\] <p>Note that MathJax 3 is <a href="https://docs.mathjax.org/en/latest/upgrading/whats-new-3.0.html">a major re-write of MathJax</a> that brought a significant improvement to the loading and rendering speed, which is now <a href="http://www.intmath.com/cg5/katex-mathjax-comparison.php">on par with KaTeX</a>.</p> <hr/> <h2 id="citations">Citations</h2> <p>Citations are then used in the article body with the <code class="language-plaintext highlighter-rouge">&lt;d-cite&gt;</code> tag. The key attribute is a reference to the id provided in the bibliography. The key attribute can take multiple ids, separated by commas.</p> <p>The citation is presented inline like this: <d-cite key="gregor2015draw"></d-cite> (a number that displays more information on hover). If you have an appendix, a bibliography is automatically created and populated in it.</p> <p>Distill chose a numerical inline citation style to improve readability of citation dense articles and because many of the benefits of longer citations are obviated by displaying more information on hover. However, we consider it good style to mention author last names if you discuss something at length and it fits into the flow well — the authors are human and it’s nice for them to have the community associate them with their work.</p> <hr/> <h2 id="footnotes">Footnotes</h2> <p>Just wrap the text you would like to show up in a footnote in a <code class="language-plaintext highlighter-rouge">&lt;d-footnote&gt;</code> tag. The number of the footnote will be automatically generated.<d-footnote>This will become a hoverable footnote.</d-footnote></p> <hr/> <h2 id="code-blocks">Code Blocks</h2> <p>Syntax highlighting is provided within <code class="language-plaintext highlighter-rouge">&lt;d-code&gt;</code> tags. An example of inline code snippets: <code class="language-plaintext highlighter-rouge">&lt;d-code language="html"&gt;let x = 10;&lt;/d-code&gt;</code>. For larger blocks of code, add a <code class="language-plaintext highlighter-rouge">block</code> attribute:</p> <d-code block="" language="javascript"> var x = 25; function(x) { return x * x; } </d-code> <p><strong>Note:</strong> <code class="language-plaintext highlighter-rouge">&lt;d-code&gt;</code> blocks do not look good in the dark mode. You can always use the default code-highlight using the <code class="language-plaintext highlighter-rouge">highlight</code> liquid tag:</p> <figure class="highlight"><pre><code class="language-javascript" data-lang="javascript"><span class="kd">var</span> <span class="nx">x</span> <span class="o">=</span> <span class="mi">25</span><span class="p">;</span>
<span class="kd">function</span><span class="p">(</span><span class="nx">x</span><span class="p">)</span> <span class="p">{</span>
  <span class="k">return</span> <span class="nx">x</span> <span class="o">*</span> <span class="nx">x</span><span class="p">;</span>
<span class="p">}</span></code></pre></figure> <hr/> <h2 id="layouts">Layouts</h2> <p>The main text column is referred to as the body. It is the assumed layout of any direct descendants of the <code class="language-plaintext highlighter-rouge">d-article</code> element.</p> <div class="fake-img l-body"> <p>.l-body</p> </div> <p>For images you want to display a little larger, try <code class="language-plaintext highlighter-rouge">.l-page</code>:</p> <div class="fake-img l-page"> <p>.l-page</p> </div> <p>All of these have an outset variant if you want to poke out from the body text a little bit. For instance:</p> <div class="fake-img l-body-outset"> <p>.l-body-outset</p> </div> <div class="fake-img l-page-outset"> <p>.l-page-outset</p> </div> <p>Occasionally you’ll want to use the full browser width. For this, use <code class="language-plaintext highlighter-rouge">.l-screen</code>. You can also inset the element a little from the edge of the browser by using the inset variant.</p> <div class="fake-img l-screen"> <p>.l-screen</p> </div> <div class="fake-img l-screen-inset"> <p>.l-screen-inset</p> </div> <p>The final layout is for marginalia, asides, and footnotes. It does not interrupt the normal flow of <code class="language-plaintext highlighter-rouge">.l-body</code> sized text except on mobile screen sizes.</p> <div class="fake-img l-gutter"> <p>.l-gutter</p> </div> <hr/> <h2 id="other-typography">Other Typography?</h2> <p>Emphasis, aka italics, with <em>asterisks</em> (<code class="language-plaintext highlighter-rouge">*asterisks*</code>) or <em>underscores</em> (<code class="language-plaintext highlighter-rouge">_underscores_</code>).</p> <p>Strong emphasis, aka bold, with <strong>asterisks</strong> or <strong>underscores</strong>.</p> <p>Combined emphasis with <strong>asterisks and <em>underscores</em></strong>.</p> <p>Strikethrough uses two tildes. <del>Scratch this.</del></p> <ol> <li>First ordered list item</li> <li>Another item ⋅⋅* Unordered sub-list.</li> <li>Actual numbers don’t matter, just that it’s a number ⋅⋅1. Ordered sub-list</li> <li>And another item.</li> </ol> <p>⋅⋅⋅You can have properly indented paragraphs within list items. Notice the blank line above, and the leading spaces (at least one, but we’ll use three here to also align the raw Markdown).</p> <p>⋅⋅⋅To have a line break without a paragraph, you will need to use two trailing spaces.⋅⋅ ⋅⋅⋅Note that this line is separate, but within the same paragraph.⋅⋅ ⋅⋅⋅(This is contrary to the typical GFM line break behaviour, where trailing spaces are not required.)</p> <ul> <li>Unordered list can use asterisks</li> <li>Or minuses</li> <li>Or pluses</li> </ul> <p><a href="https://www.google.com">I’m an inline-style link</a></p> <p><a href="https://www.google.com" title="Google's Homepage">I’m an inline-style link with title</a></p> <p><a href="https://www.mozilla.org">I’m a reference-style link</a></p> <p><a href="../blob/master/LICENSE">I’m a relative reference to a repository file</a></p> <p><a href="http://slashdot.org">You can use numbers for reference-style link definitions</a></p> <p>Or leave it empty and use the <a href="http://www.reddit.com">link text itself</a>.</p> <p>URLs and URLs in angle brackets will automatically get turned into links. http://www.example.com or <a href="http://www.example.com">http://www.example.com</a> and sometimes example.com (but not on Github, for example).</p> <p>Some text to show that the reference links can follow later.</p> <p>Here’s our logo (hover to see the title text):</p> <p>Inline-style: <img src="https://github.com/adam-p/markdown-here/raw/master/src/common/images/icon48.png" alt="alt text" title="Logo Title Text 1"/></p> <p>Reference-style: <img src="https://github.com/adam-p/markdown-here/raw/master/src/common/images/icon48.png" alt="alt text" title="Logo Title Text 2"/></p> <p>Inline <code class="language-plaintext highlighter-rouge">code</code> has <code class="language-plaintext highlighter-rouge">back-ticks around</code> it.</p> <div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">var</span> <span class="nx">s</span> <span class="o">=</span> <span class="dl">"</span><span class="s2">JavaScript syntax highlighting</span><span class="dl">"</span><span class="p">;</span>
<span class="nx">alert</span><span class="p">(</span><span class="nx">s</span><span class="p">);</span>
</code></pre></div></div> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">s</span> <span class="o">=</span> <span class="s">"Python syntax highlighting"</span>
<span class="k">print</span> <span class="n">s</span>
</code></pre></div></div> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>No language indicated, so no syntax highlighting. 
But let's throw in a &lt;b&gt;tag&lt;/b&gt;.
</code></pre></div></div> <p>Colons can be used to align columns.</p> <table> <thead> <tr> <th>Tables</th> <th style="text-align: center">Are</th> <th style="text-align: right">Cool</th> </tr> </thead> <tbody> <tr> <td>col 3 is</td> <td style="text-align: center">right-aligned</td> <td style="text-align: right">$1600</td> </tr> <tr> <td>col 2 is</td> <td style="text-align: center">centered</td> <td style="text-align: right">$12</td> </tr> <tr> <td>zebra stripes</td> <td style="text-align: center">are neat</td> <td style="text-align: right">$1</td> </tr> </tbody> </table> <p>There must be at least 3 dashes separating each header cell. The outer pipes (|) are optional, and you don’t need to make the raw Markdown line up prettily. You can also use inline Markdown.</p> <table> <thead> <tr> <th>Markdown</th> <th>Less</th> <th>Pretty</th> </tr> </thead> <tbody> <tr> <td><em>Still</em></td> <td><code class="language-plaintext highlighter-rouge">renders</code></td> <td><strong>nicely</strong></td> </tr> <tr> <td>1</td> <td>2</td> <td>3</td> </tr> </tbody> </table> <blockquote> <p>Blockquotes are very handy in email to emulate reply text. This line is part of the same quote.</p> </blockquote> <p>Quote break.</p> <blockquote> <p>This is a very long line that will still be quoted properly when it wraps. Oh boy let’s keep writing to make sure this is long enough to actually wrap for everyone. Oh, you can <em>put</em> <strong>Markdown</strong> into a blockquote.</p> </blockquote> <p>Here’s a line for us to start with.</p> <p>This line is separated from the one above by two newlines, so it will be a <em>separate paragraph</em>.</p> <p>This line is also a separate paragraph, but… This line is only separated by a single newline, so it’s a separate line in the <em>same paragraph</em>.</p>]]></content><author><name>Albert Einstein</name></author><summary type="html"><![CDATA[an example of a distill-style blog post and main elements]]></summary></entry><entry><title type="html">a post with github metadata</title><link href="https://jotorpe.github.io/blog/2020/github-metadata/" rel="alternate" type="text/html" title="a post with github metadata"/><published>2020-09-28T21:01:00+00:00</published><updated>2020-09-28T21:01:00+00:00</updated><id>https://jotorpe.github.io/blog/2020/github-metadata</id><content type="html" xml:base="https://jotorpe.github.io/blog/2020/github-metadata/"><![CDATA[<p>A sample blog page that demonstrates the accessing of github meta data.</p> <h2 id="what-does-github-metadata-do">What does Github-MetaData do?</h2> <ul> <li>Propagates the site.github namespace with repository metadata</li> <li>Setting site variables : <ul> <li>site.title</li> <li>site.description</li> <li>site.url</li> <li>site.baseurl</li> </ul> </li> <li>Accessing the metadata - duh.</li> <li>Generating edittable links.</li> </ul> <h2 id="additional-reading">Additional Reading</h2> <ul> <li>If you’re recieving incorrect/missing data, you may need to perform a Github API<a href="https://github.com/jekyll/github-metadata/blob/master/docs/authentication.md"> authentication</a>.</li> <li>Go through this <a href="https://jekyll.github.io/github-metadata/">README</a> for more details on the topic.</li> <li><a href="https://github.com/jekyll/github-metadata/blob/master/docs/site.github.md">This page</a> highlights all the feilds you can access with github-metadata. <br/></li> </ul> <h2 id="example-metadata">Example MetaData</h2> <ul> <li>Host Name :</li> <li>URL :</li> <li>BaseURL :</li> <li>Archived :</li> <li>Contributors :</li> </ul>]]></content><author><name></name></author><category term="sample-posts"/><category term="external-services"/><summary type="html"><![CDATA[a quick run down on accessing github metadata.]]></summary></entry><entry><title type="html">a post with twitter</title><link href="https://jotorpe.github.io/blog/2020/twitter/" rel="alternate" type="text/html" title="a post with twitter"/><published>2020-09-28T15:12:00+00:00</published><updated>2020-09-28T15:12:00+00:00</updated><id>https://jotorpe.github.io/blog/2020/twitter</id><content type="html" xml:base="https://jotorpe.github.io/blog/2020/twitter/"><![CDATA[<p>A sample blog page that demonstrates the inclusion of Tweets/Timelines/etc.</p> <h1 id="tweet">Tweet</h1> <p>An example of displaying a tweet:</p> <div class="jekyll-twitter-plugin"><blockquote class="twitter-tweet"><p lang="sv" dir="ltr">jekyll-twitter-plugin (1.0.0): A Liquid tag plugin for Jekyll that renders Tweets from Twitter API <a href="http://t.co/m4EIQPM9h4">http://t.co/m4EIQPM9h4</a></p>&mdash; RubyGems (@rubygems) <a href="https://twitter.com/rubygems/status/518821243320287232?ref_src=twsrc%5Etfw">October 5, 2014</a></blockquote> <script async="" src="https://platform.twitter.com/widgets.js" charset="utf-8"></script> </div> <h1 id="timeline">Timeline</h1> <p>An example of pulling from a timeline:</p> <div class="jekyll-twitter-plugin"><a class="twitter-timeline" data-width="500" data-tweet-limit="3" href="https://twitter.com/jekyllrb?ref_src=twsrc%5Etfw">Tweets by jekyllrb</a> <script async="" src="https://platform.twitter.com/widgets.js" charset="utf-8"></script> </div> <h1 id="additional-details">Additional Details</h1> <p>For more details on using the plugin visit: <a href="https://github.com/rob-murray/jekyll-twitter-plugin">jekyll-twitter-plugin</a></p>]]></content><author><name></name></author><category term="sample-posts"/><category term="external-services"/><category term="formatting"/><summary type="html"><![CDATA[an example of a blog post with twitter]]></summary></entry><entry><title type="html">a post with comments</title><link href="https://jotorpe.github.io/blog/2015/comments/" rel="alternate" type="text/html" title="a post with comments"/><published>2015-10-20T15:59:00+00:00</published><updated>2015-10-20T15:59:00+00:00</updated><id>https://jotorpe.github.io/blog/2015/comments</id><content type="html" xml:base="https://jotorpe.github.io/blog/2015/comments/"><![CDATA[<p>This post shows how to add DISQUS comments.</p>]]></content><author><name></name></author><category term="sample-posts"/><category term="external-services"/><summary type="html"><![CDATA[an example of a blog post with comments]]></summary></entry><entry><title type="html">a post with math</title><link href="https://jotorpe.github.io/blog/2015/math/" rel="alternate" type="text/html" title="a post with math"/><published>2015-10-20T15:12:00+00:00</published><updated>2015-10-20T15:12:00+00:00</updated><id>https://jotorpe.github.io/blog/2015/math</id><content type="html" xml:base="https://jotorpe.github.io/blog/2015/math/"><![CDATA[<p>This theme supports rendering beautiful math in inline and display modes using <a href="https://www.mathjax.org/">MathJax 3</a> engine. You just need to surround your math expression with <code class="language-plaintext highlighter-rouge">$$</code>, like <code class="language-plaintext highlighter-rouge">$$ E = mc^2 $$</code>. If you leave it inside a paragraph, it will produce an inline expression, just like \(E = mc^2\).</p> <p>To use display mode, again surround your expression with <code class="language-plaintext highlighter-rouge">$$</code> and place it as a separate paragraph. Here is an example:</p> \[\sum_{k=1}^\infty |\langle x, e_k \rangle|^2 \leq \|x\|^2\] <p>You can also use <code class="language-plaintext highlighter-rouge">\begin{equation}...\end{equation}</code> instead of <code class="language-plaintext highlighter-rouge">$$</code> for display mode math. MathJax will automatically number equations:</p> <p>\begin{equation} \label{eq:cauchy-schwarz} \left( \sum_{k=1}^n a_k b_k \right)^2 \leq \left( \sum_{k=1}^n a_k^2 \right) \left( \sum_{k=1}^n b_k^2 \right) \end{equation}</p> <p>and by adding <code class="language-plaintext highlighter-rouge">\label{...}</code> inside the equation environment, we can now refer to the equation using <code class="language-plaintext highlighter-rouge">\eqref</code>.</p> <p>Note that MathJax 3 is <a href="https://docs.mathjax.org/en/latest/upgrading/whats-new-3.0.html">a major re-write of MathJax</a> that brought a significant improvement to the loading and rendering speed, which is now <a href="http://www.intmath.com/cg5/katex-mathjax-comparison.php">on par with KaTeX</a>.</p>]]></content><author><name></name></author><category term="sample-posts"/><category term="formatting"/><category term="math"/><summary type="html"><![CDATA[an example of a blog post with some math]]></summary></entry></feed>